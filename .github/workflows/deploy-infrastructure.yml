name: üöÄ Deploy Logic App Infrastructure

on:
  # D√©clenchement automatique sur push vers main
  push:
    branches: [ main ]
    paths: 
      - 'infra/**'
      - '.github/workflows/deploy-infrastructure.yml'
  
  # D√©clenchement manuel avec choix d'environnement
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm_deployment:
        description: 'Confirm deployment (type: yes)'
        required: true
        default: 'no'
        type: string

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP_PREFIX: 'rg-logicapp'
  LOCATION: 'France Central'

permissions:
  contents: read    # Required to read repository contents

jobs:
  # ===============================================
  # Job 1: Validation et tests
  # ===============================================
  validate:
    name: üîç Validate Bicep Templates
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      resource-group: ${{ steps.set-env.outputs.resource-group }}
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üéØ Set environment variables
      id: set-env
      run: |
        # D√©terminer l'environnement
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENVIRONMENT="${{ github.event.inputs.environment }}"
        else
          ENVIRONMENT="dev"
        fi
        
        RESOURCE_GROUP="${{ env.RESOURCE_GROUP_PREFIX }}-${ENVIRONMENT}"
        
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "resource-group=${RESOURCE_GROUP}" >> $GITHUB_OUTPUT
        
        echo "üéØ Target Environment: ${ENVIRONMENT}"
        echo "üì¶ Resource Group: ${RESOURCE_GROUP}"

    - name: üîê Azure Login (Service Principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üß™ Install Bicep CLI
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        bicep --version

    - name: ‚úÖ Validate Bicep syntax
      run: |
        echo "üîç Validating Bicep template syntax..."
        bicep build infra/main.bicep --stdout

    - name: üèóÔ∏è Create Resource Group (if needed)
      run: |
        RG_EXISTS=$(az group exists --name "${{ steps.set-env.outputs.resource-group }}")
        if [ "$RG_EXISTS" = "false" ]; then
          echo "üì¶ Creating resource group: ${{ steps.set-env.outputs.resource-group }}"
          az group create \
            --name "${{ steps.set-env.outputs.resource-group }}" \
            --location "${{ env.LOCATION }}" \
            --tags Environment="${{ steps.set-env.outputs.environment }}" Project="LogicApp" ManagedBy="GitHub-Actions"
        else
          echo "‚úÖ Resource group already exists: ${{ steps.set-env.outputs.resource-group }}"
        fi

    - name: üîç Validate deployment (What-If)
      run: |
        echo "üîç Running deployment validation (What-If)..."
        az deployment group what-if \
          --resource-group "${{ steps.set-env.outputs.resource-group }}" \
          --template-file "./infra/main.bicep" \
          --parameters "./infra/main.dev.bicepparam" \
          --name "logicapp-${{ steps.set-env.outputs.environment }}-validation" \
          --no-pretty-print

    - name: ‚úÖ Test deployment validation
      run: |
        echo "‚úÖ Testing deployment validation..."
        az deployment group validate \
          --resource-group "${{ steps.set-env.outputs.resource-group }}" \
          --template-file "./infra/main.bicep" \
          --parameters "./infra/main.dev.bicepparam" \
          --name "logicapp-${{ steps.set-env.outputs.environment }}-test"

  # ===============================================
  # Job 2: D√©ploiement Infrastructure
  # ===============================================
  deploy:
    name: üöÄ Deploy to ${{ needs.validate.outputs.environment }}
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ needs.validate.outputs.environment }}
    
    # Condition pour le d√©ploiement manuel
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm_deployment == 'yes')
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîê Azure Login (OIDC)
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: üöÄ Deploy Infrastructure
      id: deploy
      run: |
        echo "üöÄ Deploying Logic App infrastructure to ${{ needs.validate.outputs.environment }}..."
        
        DEPLOYMENT_NAME="logicapp-${{ needs.validate.outputs.environment }}-$(date +%Y%m%d-%H%M%S)"
        
        az deployment group create \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --template-file "./infra/main.bicep" \
          --parameters "./infra/main.dev.bicepparam" \
          --name "${DEPLOYMENT_NAME}" \
          --verbose
        
        echo "deployment-name=${DEPLOYMENT_NAME}" >> $GITHUB_OUTPUT

    - name: üìä Get deployment outputs
      id: outputs
      run: |
        echo "üìä Retrieving deployment outputs..."
        
        LOGIC_APP_NAME=$(az deployment group show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --name "${{ steps.deploy.outputs.deployment-name }}" \
          --query "properties.outputs.logicAppName.value" \
          --output tsv)
        
        LOGIC_APP_ID=$(az deployment group show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --name "${{ steps.deploy.outputs.deployment-name }}" \
          --query "properties.outputs.logicAppId.value" \
          --output tsv)
        
        AI_INSTRUMENTATION_KEY=$(az deployment group show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --name "${{ steps.deploy.outputs.deployment-name }}" \
          --query "properties.outputs.applicationInsightsInstrumentationKey.value" \
          --output tsv)
        
        echo "logic-app-name=${LOGIC_APP_NAME}" >> $GITHUB_OUTPUT
        echo "logic-app-id=${LOGIC_APP_ID}" >> $GITHUB_OUTPUT
        echo "ai-key=${AI_INSTRUMENTATION_KEY}" >> $GITHUB_OUTPUT
        
        echo "‚úÖ Logic App Name: ${LOGIC_APP_NAME}"
        echo "‚úÖ Logic App ID: ${LOGIC_APP_ID}"

  # ===============================================
  # Job 3: Tests post-d√©ploiement
  # ===============================================
  test:
    name: üß™ Test Deployed Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    
    steps:
    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üîê Azure Login (Service Principal)
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üîç Check Logic App status
      run: |
        echo "üîç Checking Logic App deployment status..."
        
        az logic workflow show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --name "${{ needs.deploy.outputs.logic-app-name }}" \
          --query "{name:name,state:state,location:location}" \
          --output table

    - name: üåê Get Logic App trigger URL
      id: trigger
      run: |
        echo "üåê Retrieving Logic App trigger URL..."
        
        TRIGGER_URL=$(az rest \
          --method post \
          --url "https://management.azure.com${{ needs.deploy.outputs.logic-app-id }}/triggers/manual/listCallbackUrl?api-version=2016-06-01" \
          --query "value" \
          --output tsv)
        
        echo "trigger-url=${TRIGGER_URL}" >> $GITHUB_OUTPUT
        echo "‚úÖ Trigger URL retrieved successfully"

    - name: üß™ Test Logic App functionality  
      run: |
        echo "üß™ Testing Logic App with HTTP request..."
        
        RESPONSE=$(curl -s -X POST "${{ steps.trigger.outputs.trigger-url }}" \
          -H "Content-Type: application/json" \
          -d '{"message": "GitHub Actions deployment test", "environment": "${{ needs.validate.outputs.environment }}"}' \
          -w "HTTP_CODE:%{http_code}")
        
        HTTP_CODE=$(echo "${RESPONSE}" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RESPONSE_BODY=$(echo "${RESPONSE}" | sed 's/HTTP_CODE:[0-9]*$//')
        
        echo "üìä HTTP Status Code: ${HTTP_CODE}"
        echo "üìÑ Response Body: ${RESPONSE_BODY}"
        
        if [ "${HTTP_CODE}" = "200" ]; then
          echo "‚úÖ Logic App test successful!"
        else
          echo "‚ùå Logic App test failed with status ${HTTP_CODE}"
          exit 1
        fi

    - name: üìä Check monitoring setup
      run: |
        echo "üìä Verifying monitoring components..."
        
        # V√©rifier Log Analytics Workspace
        az monitor log-analytics workspace show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --workspace-name "law-${{ needs.deploy.outputs.logic-app-name }}-${{ needs.validate.outputs.environment }}" \
          --query "{name:name,retentionInDays:retentionInDays,provisioningState:provisioningState}" \
          --output table
        
        # V√©rifier Application Insights
        az monitor app-insights component show \
          --resource-group "${{ needs.validate.outputs.resource-group }}" \
          --app "ai-${{ needs.deploy.outputs.logic-app-name }}-${{ needs.validate.outputs.environment }}" \
          --query "{name:name,instrumentationKey:instrumentationKey,provisioningState:provisioningState}" \
          --output table
        
        echo "‚úÖ Monitoring components verified successfully"

  # ===============================================
  # Job 4: Notification et nettoyage
  # ===============================================
  notify:
    name: üì¢ Post-Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate, deploy, test]
    if: always()
    
    steps:
    - name: üì¢ Deployment Summary
      run: |
        echo "## üöÄ Logic App Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Resource Group:** ${{ needs.validate.outputs.resource-group }}" >> $GITHUB_STEP_SUMMARY
        echo "**Logic App:** ${{ needs.deploy.outputs.logic-app-name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "‚úÖ **Status:** Deployment and tests successful!" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Logic App URL:** Available and responding" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Monitoring:** Active (Application Insights + Log Analytics)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Status:** Deployment or tests failed" >> $GITHUB_STEP_SUMMARY
          echo "üîç **Action:** Check workflow logs for details" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìÖ **Deployed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "üë§ **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "üîó **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY