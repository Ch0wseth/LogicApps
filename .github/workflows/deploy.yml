name: Deploy Logic App Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_RESOURCEGROUP_DEV: rg-logicapp-dev
  AZURE_RESOURCEGROUP_PROD: rg-logicapp-prod
  LOGIC_APP_NAME: logicapp-webhook

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Bicep Template
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bicep CLI
      uses: azure/bicep-build-action@v1.0.1
      with:
        bicepFilePath: ./infra/main.bicep
    
    - name: Validate workflow JSON
      run: |
        # Validate JSON syntax
        python -m json.tool src/workflow.json > /dev/null
        echo "‚úÖ Workflow JSON is valid"

  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: validate
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy Infrastructure
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_DEV }}
        template: ./infra/main.bicep
        parameters: |
          logicAppName=${{ env.LOGIC_APP_NAME }}-dev
          environment=dev
        failOnStdErr: false
    
    - name: Test Logic App
      run: |
        echo "üß™ Testing Logic App deployment..."
        # Get the trigger URL
        TRIGGER_URL=$(az rest --method post \
          --url "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCEGROUP_DEV }}/providers/Microsoft.Logic/workflows/${{ env.LOGIC_APP_NAME }}-dev/triggers/manual/listCallbackUrl?api-version=2016-06-01" \
          --query "value" --output tsv)
        
        # Test ping endpoint
        curl -X POST "$TRIGGER_URL" \
          -H "Content-Type: application/json" \
          -d '{"action":"ping","message":"CI/CD Test"}' \
          --fail --silent --show-error
        
        echo "‚úÖ Logic App is responding correctly"

  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production  
    needs: [validate, deploy-dev]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy Infrastructure
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_PROD }}
        template: ./infra/main.bicep
        parameters: |
          logicAppName=${{ env.LOGIC_APP_NAME }}-prod
          environment=prod
        failOnStdErr: false
    
    - name: Test Production Deployment
      run: |
        echo "üöÄ Testing Production Logic App..."
        TRIGGER_URL=$(az rest --method post \
          --url "https://management.azure.com/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.AZURE_RESOURCEGROUP_PROD }}/providers/Microsoft.Logic/workflows/${{ env.LOGIC_APP_NAME }}-prod/triggers/manual/listCallbackUrl?api-version=2016-06-01" \
          --query "value" --output tsv)
        
        curl -X POST "$TRIGGER_URL" \
          -H "Content-Type: application/json" \
          -d '{"action":"ping","message":"Production Health Check"}' \
          --fail --silent --show-error
        
        echo "‚úÖ Production deployment successful"

  notify:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [deploy-dev, deploy-prod]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-dev.result == 'success' || needs.deploy-prod.result == 'success'
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "Dev: ${{ needs.deploy-dev.result }}"
        echo "Prod: ${{ needs.deploy-prod.result }}"
    
    - name: Notify Failure  
      if: needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Dev: ${{ needs.deploy-dev.result }}"
        echo "Prod: ${{ needs.deploy-prod.result }}"
        exit 1